#!/bin/bash

set -euo pipefail

COMMAND=$(basename "${0}")

function usage {
    cat <<EOF
NAME
    ${COMMAND}

SYNOPSIS
    ${COMMAND} {-e|-d} -i <input_file> -o <output_file> -k <encrypted_data_key_file> [-K <kms_key_id>] [-r] [-h]

DESCRIPTION
    Encrypt and decrypt file by envelope encryption using AWS KMS.

OPTIONS
    -d  Decrypt.
    -e  Encrypt.
    -i  Input file. This is plaintext when encryption and ciphertext when decryption.
    -k  Encrypted data key file.
    -K  KMS key id. This is required only when encryption.
    -o  Output file. This is ciphertext when encryption and plaintext when decryption.
    -r  Remove input file after encryption/decryption.
    -h  help for ${COMMAND}.
EOF
}

function encrypt {
    aws kms generate-data-key --key-id "${KMS_KEY_ID}" --key-spec "AES_256" | jq -r .CiphertextBlob | base64 -d > "${DATA_KEY_FILE}"
    DATA_KEY=$(aws kms decrypt --ciphertext-blob fileb://"${DATA_KEY_FILE}" | jq -r .Plaintext)
    openssl aes-256-cbc -e -in "${INPUT_FILE}" -out "${OUTPUT_FILE}" --pass pass:"${DATA_KEY}" -pbkdf2
}

function decrypt {
    DATA_KEY=$(aws kms decrypt --ciphertext-blob fileb://"${DATA_KEY_FILE}" | jq -r .Plaintext)
    openssl aes-256-cbc -d -in "${INPUT_FILE}" -out "${OUTPUT_FILE}" --pass pass:"${DATA_KEY}" -pbkdf2
}

REMOVE_INPUT=0

while getopts dei:k:K:o:rh OPT
do
    case $OPT in
        d) MODE="decrypt";;
        e) MODE="encrypt";;
        i) INPUT_FILE=${OPTARG};;
        k) DATA_KEY_FILE=${OPTARG};;
        K) KMS_KEY_ID=${OPTARG};;
        o) OUTPUT_FILE=${OPTARG};;
        r) REMOVE_INPUT=1;;
        h) usage; exit;;
        *) usage; exit 1;;
    esac
done

case ${MODE} in
    encrypt) encrypt;;
    decrypt) decrypt;;
esac

if [ ${REMOVE_INPUT} -ne 0 ]; then
    rm "${INPUT_FILE}"
fi
